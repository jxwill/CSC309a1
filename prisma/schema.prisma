generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  firstname           String
  lastname            String
  email               String         @unique
  password            String
  role                String         @default("User")
  avatar              String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  banned              Boolean        @default(false)
  blogPosts           BlogPost[]
  codeTemplates       CodeTemplate[]
  comments            Comment[]
  Rating              Rating[]
  reports             Report[]
  forkedCodeTemplates CodeTemplate[] @relation("ForkedCodeTemplates")
}

model CodeTemplate {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  tags        String
  code        String
  language    String
  isForked    Boolean    @default(false)
  authorId    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  author      User       @relation(fields: [authorId], references: [id])
  blogPosts   BlogPost[] @relation("BlogPostToCodeTemplate")
  forkedBy    User[]     @relation("ForkedCodeTemplates")
}

model BlogPost {
  id            Int            @id @default(autoincrement())
  title         String
  description   String
  content       String
  tags          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  hidden        Boolean        @default(false)
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
  comments      Comment[]
  ratings       Rating[]
  Report        Report[]
  codeTemplates CodeTemplate[] @relation("BlogPostToCodeTemplate")
}

model Comment {
  id              Int       @id @default(autoincrement())
  content         String
  authorId        Int
  blogPostId      Int
  parentCommentId Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation(fields: [authorId], references: [id])
  blogPost        BlogPost  @relation(fields: [blogPostId], references: [id])
  parentComment   Comment?  @relation("CommentReplies", fields: [parentCommentId], references: [id])
  replies         Comment[] @relation("CommentReplies")
  Rating          Rating[]
  Report          Report[]
}

model Report {
  id             Int       @id @default(autoincrement())
  reason         String
  additionalInfo String?
  userId         Int
  blogPostId     Int?
  commentId      Int?
  user           User      @relation(fields: [userId], references: [id])
  blogPost       BlogPost? @relation(fields: [blogPostId], references: [id])
  comment        Comment?  @relation(fields: [commentId], references: [id])

  @@unique([blogPostId, commentId])
}

model Rating {
  id         Int       @id @default(autoincrement())
  value      Int
  createdAt  DateTime  @default(now())
  userId     Int
  blogPostId Int?
  commentId  Int?
  user       User      @relation(fields: [userId], references: [id])
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  comment    Comment?  @relation(fields: [commentId], references: [id])
}
